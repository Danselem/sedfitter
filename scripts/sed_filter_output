#!/usr/bin/env python

import sys
import cPickle as pickle

from sedfitter.fit_info import FitInfo
from sedfitter.extinction import Extinction


def _usage(*args):

    if len(args) == 1:
        print "\n    ERROR: " + args[0] + ''

    print '''
    Usage: sed_filter_output [arguments]

    Required arguments :
      input=filename     - the input file

    then one and only one of the following:
      chi=value          - constrain using total chisquared
      cpd=value          - constrain using chisquared per datapoint
    '''
    sys.exit(0)

if len(sys.argv) == 1:
    _usage()

options = {}
for option in sys.argv[1:]:
    try:
        key, value = option.split('=')
    except:
        _usage("Invalid option %s" % option)
    options[key] = value

if not 'input' in options:
    _usage("Argument input is required")

if (not 'cpd' in options and not 'chi' in options) \
    or ('cpd' in options and 'chi' in options):
    _usage("One of cpd or chi is required")

# Open input and output file
fin = file(options['input'], 'rb')
fout_good = file(options['input'].replace('.pickle', '_good.pickle'), 'wb')
fout_bad = file(options['input'].replace('.pickle', '_bad.pickle'), 'wb')

# Read in header of output file
model_dir = pickle.load(fin)
filters = pickle.load(fin)
model_names = pickle.load(fin)
extinction_law = Extinction()
extinction_law.read_binary(fin)

# Output header to good fits file
pickle.dump(model_dir, fout_good, 2)
pickle.dump(filters, fout_good, 2)
pickle.dump(model_names, fout_good, 2)
extinction_law.write_binary(fout_good)

# Output header to bad fits file
pickle.dump(model_dir, fout_bad, 2)
pickle.dump(filters, fout_bad, 2)
pickle.dump(model_names, fout_bad, 2)
extinction_law.write_binary(fout_bad)

info = FitInfo()

if 'chi' in options:
    thresh = float(options['chi'])
else:
    thresh = float(options['cpd'])

while True:

    # Read in next fit
    try:
        info.read_binary(fin)
    except:
        break

    if 'chi' in options:
        chi = info.chi2[0]
    else:
        chi = info.chi2[0] / float(info.source.n_data)

    print info.source.name, chi, thresh, chi < thresh

    if chi < thresh:
        print "good"
        info.write_binary(fout_good)
    else:
        print "bad"
        info.write_binary(fout_bad)

# Close input and output files
fin.close()
fout_good.close()
fout_bad.close()
